@page "/gateway"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject GatewayApiClient GatewayApi
@inject IDialogService DialogService

@inject IState<RoutesState> RoutesState
@inject IDispatcher Dispatcher

<PageTitle>Gateway</PageTitle>

<h1>Gateway</h1>

<div style="height: 100%; overflow:visible;">
@if (RoutesState?.Value?.Routes is null || clusters is null)
{
    <p>Obtaining services please wait...</p>
    <p><em>
        <div style="width: 50%; display: grid; grid-gap: 12px; grid-auto-flow: column;">            
            <FluentProgress></FluentProgress>
             
        </div>
    </em></p>   
}

@if (RoutesState?.Value?.Routes is not null)
{
    <h2>Routes</h2>
    if (RoutesState?.Value?.Routes.Any() ?? false)
    {
        <FluentDataGrid Items="@RoutesState.Value.Routes.AsQueryable()">
            <PropertyColumn Property="@(p => p.RouteId)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ClusterId)" Sortable="true" />
            <PropertyColumn Property="@(p => p.MatchPath)" Sortable="true" />
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="()=> OpenEditAsync(context)" />
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="()=>DeleteRouteAsync(context)" />
            </TemplateColumn>
        </FluentDataGrid>       
    }
    <FluentButton Style="margin-top: 10px;" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => OpenEditAsync(new RouteDto()))" />
}

@if (clusters is not null)
{
     <h2>Clusters</h2>
     if(routes?.Length > 0)
    {
        <div style="height: 100%;">
            <FluentCombobox Style="margin-top: 10px;" Height="200px" Items=@routesCombo
                OptionText="@(i => i.Text)" 
                OptionValue="@(i => i.Value)" 
                OptionSelected="@(i => i.Selected)"
                @bind-SelectedOption="@selectedClusterOption"
                @bind-Value="@clusterValue" />
            <FluentButton Style="margin-top: 10px;" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => OpenEditAsync(routes.Where(r => r.ClusterId == clusterValue).FirstOrDefault(),clusters.Where(c=> c.ClusterId == clusterValue)))" />
        </div>        
    }   
    if (clusters.Length > 0)
    {
        <FluentDataGrid Items="@clusters.AsQueryable()">
            <PropertyColumn Property="@(p => p.ClusterId)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Destination)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Path)" Sortable="true" />
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => Console.WriteLine("Edit clicked"))" />
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Console.WriteLine("Delete clicked"))" />
            </TemplateColumn>
        </FluentDataGrid>        
    }
    
}
</div>
@code {
    private RouteDto[]? routes;
    private ClusterDto[]? clusters;
    RouteDto? DialogData { get; set; }
    bool canceled;

    string? clusterValue;
    Option<string> selectedClusterOption = default!;
    private IEnumerable<Option<string>> routesCombo => routes is not null && routes.Length > 0 ? routes.Select(x=> new Option<string> { Value = x.ClusterId, Text = x.ClusterId }) : [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        routes = await GatewayApi.GetRoutesAsync();
        clusters = await GatewayApi.GetClustersAsync();
        Dispatcher.Dispatch(new FetchRoutesAction());        
    }
    private async Task OpenEditAsync(RouteDto? routeDto,IEnumerable<ClusterDto>? clusterDto = default)
    {
        DialogData = routeDto;
        if(DialogData is not null && !string.IsNullOrEmpty(DialogData?.RouteId))
        {
            var dialog = await DialogService.ShowDialogAsync<RouteDialog>(DialogData, new DialogParameters()
            {
                Height = "360px",
                Title = $"Updating the Route: {DialogData.ClusterId}",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

            var result = await dialog.Result;
            var data = result.Data as RouteDto;
            routes = routes?.Select(r => r.RouteId != data?.RouteId 
                                            ? r 
                                            : r with 
                                            {
                                                ClusterId = data.ClusterId,
                                                MatchPath = data.MatchPath
                                            })
                                            .ToArray();
            StateHasChanged();
        }
        else    
        {
            var dialog = await DialogService.ShowDialogAsync<RouteDialog>(default, new DialogParameters()
            {
                Height = "360px",
                Title = $"Create new route",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

            var result = await dialog.Result;
            var data = result.Data as RouteDto;
            if(data is not null)
            {
                routes = routes?.Select(x => x).Append(data).ToArray();
                StateHasChanged();
            }
            
        }
        await Task.CompletedTask;
        
    }
    private async Task DeleteRouteAsync(RouteDto routeDto)
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to delete the route {routeDto.RouteId} and his clusters?", "Delete", "Cancel", "Warning");
        var result = await dialog.Result;
        canceled = result.Cancelled;
        if(!canceled)
        {
            routes = routes?.Where(r=> r.RouteId != routeDto?.RouteId).ToArray();
            clusters = clusters?.Where(r=> r.ClusterId != routeDto?.ClusterId).ToArray();
            StateHasChanged();
        }
    }
}

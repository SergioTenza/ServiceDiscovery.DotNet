@page "/gateway"

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject GatewayApiClient GatewayApi
@inject IDialogService DialogService

@inject IState<GatewayState> GatewayState
@inject IDispatcher Dispatcher

<PageTitle>Gateway</PageTitle>

<h1>Gateway</h1>

@if (GatewayState?.Value?.Routes is not null)
{
    <h2>Routes</h2>
    if(!GatewayState.Value.Routes.Any())
    {
        <h3>No routes found. <br/> Create your first route?</h3>
    }
    if (GatewayState?.Value?.Routes.Any() ?? false)
    {
		@* <FluentGrid  Spacing="3" Justify="JustifyContent.Center" Style="background-color: var(--neutral-layer-3);margin: 20px;">
			@foreach(var route in RoutesState!.Value.Routes)
			{
				<Route RouteDto="route"></Route>
			}
		</FluentGrid> *@
        <FluentDataGrid Items="@GatewayState.Value.Routes.AsQueryable()">
            <PropertyColumn Property="@(p => p.RouteId)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ClusterId)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Match.Path ?? string.Empty)" Sortable="true" />
            <TemplateColumn Title="Hosts" Align="@Align.Center">
                @if(context?.Match?.Hosts?.Any() ?? false)
                {   
                    <HostsSelect Hosts="context.Match.Hosts.Select(x => new Option<string> { Value = x, Text = x,Selected = false })"/>
                }
                else
                {
                    <FluentLabel>no hosts</FluentLabel>
                }
            </TemplateColumn>
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="()=> OpenEditRouteAsync(context)" />
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="()=>DeleteRouteAsync(context)" />
            </TemplateColumn>
        </FluentDataGrid>       
    }
    <FluentButton Style="margin-top: 10px;" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => OpenEditRouteAsync(new RouteDto()))" />
}
   
@* <h2>Clusters</h2>
<div>
    <FluentCombobox Style="margin-top: 10px;" Height="200px" Items=@routesCombo
        OptionText="@(i => i.Text)" 
        OptionValue="@(i => i.Value)" 
        OptionSelected="@(i => i.Selected)"
        @bind-SelectedOption="@selectedClusterOption"
        @bind-Value="@clusterValue" />
    <FluentButton Style="margin-top: 10px;" IconEnd="@(new Icons.Regular.Size20.Add())" OnClick="@(() => OpenEditClusterAsync(clusterValue ?? string.Empty))" />
</div>      
@if(!GatewayState?.Value?.Clusters.Any() ?? false)
{
    <h3>No clusters found.</h3>
}



@if(GatewayState?.Value?.Clusters.Any() ?? false)
{
        <FluentDataGrid Items="@GatewayState?.Value?.Clusters.AsQueryable()">
            <PropertyColumn Property="@(p => p.ClusterId)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Destinations)" Sortable="true" />
            <PropertyColumn Property="@(p => p.SessionAffinity.AffinityKeyName)" Sortable="true" />
            <TemplateColumn Title="Actions" Align="@Align.End">
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())" OnClick="@(() => Console.WriteLine("Edit clicked"))" />
                <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Console.WriteLine("Delete clicked"))" />
            </TemplateColumn>
        </FluentDataGrid>        
} *@


@code {

    string? activeid = "tab-routes";
    FluentTab? changedto;

    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }
    RouteDto? RouteDialogData { get; set; }
    IEnumerable<ClusterDto>? ClusterDialogData {get;set;}
    bool canceled;

    string? clusterValue;
    Option<string> selectedClusterOption = default!;

    private Func<IEnumerable<RouteDto>,IEnumerable<Option<string>>> GetComboOptions = (routes) =>
        {
            var response = routes.Any() ? routes.Select(x=> new Option<string> { Value = x.ClusterId, Text = x.ClusterId,Selected = false }) : [new Option<string> {Value = "no route found",Text = "no route found", Selected =  true}];
            if(response.Any())
            {
                
                response.Last().Selected = true;
            }
            return response;
        };
    private IEnumerable<Option<string>> routesCombo => GatewayState?.Value?.Routes switch
        {
            IEnumerable<RouteDto> routes => GetComboOptions(routes),
            _ => [new Option<string> {Value = "no route found",Text = "no route found", Selected =  true}]
        };


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();        
        Dispatcher.Dispatch(new FetchGatewayAction());        
    }

    private async Task OpenEditClusterAsync(string clusterId)
    {
        var clusters = GatewayState.Value.Clusters.Where(c=> c.ClusterId == clusterId);
        if(clusters.Any())
        {
            ClusterDialogData = clusters;
            var dialog = await DialogService.ShowPanelAsync<ClusterDialog>(ClusterDialogData, new DialogParameters()
            {
                Alignment = HorizontalAlignment.Right,
                Title = $"Updating the Clusters: {ClusterDialogData}",
                PrimaryAction = "Yes",
                SecondaryAction = "No",
            });

            var result = await dialog.Result;
            var data = result.Data as IEnumerable<ClusterDto>;            
            StateHasChanged();
        }
        else
        {
            var dialog = await DialogService.ShowPanelAsync<ClusterDialog>(default, new DialogParameters()
            {
                Alignment = HorizontalAlignment.Right,
                Title = $"Create new Cluster",
                PrimaryAction = "Yes",
                SecondaryAction = "No",
            });

            var result = await dialog.Result;
            var data = result.Data as IEnumerable<ClusterDto>;  
            if(data is not null)
            {
                
            }
        }

    }
    private async Task OpenEditRouteAsync(RouteDto? routeDto)
    {
        RouteDialogData = routeDto;
        if(RouteDialogData is not null && !string.IsNullOrEmpty(RouteDialogData?.RouteId))
        {
            var dialog = await DialogService.ShowPanelAsync<RouteDialog>(RouteDialogData, new DialogParameters()
            {
                Width = "50vw",
                Alignment = HorizontalAlignment.Right,
                Title = $"Updating the Route: {RouteDialogData.ClusterId}",
                PrimaryAction = "Yes",
                SecondaryAction = "No",
            });

            var result = await dialog.Result;
            var data = result.Data as RouteDto;
            var routes = GatewayState?.Value?.Routes?.Select(r => r.RouteId != data?.RouteId 
                                            ? r 
                                            : r with 
                                            {
                                                ClusterId = data.ClusterId,
                                                Match = new MatchDto{ Path = data.Match.Path }
                                            })
                                            .ToArray();
            StateHasChanged();
        }
        else    
        {
            var dialog = await DialogService.ShowPanelAsync<RouteDialog>(default, new DialogParameters()
            {
                Width = "50vw",
                Alignment = HorizontalAlignment.Right,
                Title = $"Create new route",
                PrimaryAction = "Yes",
                SecondaryAction = "No",
            });

            var result = await dialog.Result;
            var data = result.Data as RouteDto;
            if(data is not null)
            {
                Dispatcher.Dispatch(new AddRouteAction{ RouteDto = data });
            }
        }
        await Task.CompletedTask;
        
    }
    private async Task DeleteRouteAsync(RouteDto routeDto)
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Are you sure you want to delete the route {routeDto.RouteId} and his clusters?", "Delete", "Cancel", "Warning");
        var result = await dialog.Result;
        canceled = result.Cancelled;
        if(!canceled)
        {
            var routes = GatewayState?.Value?.Routes?.Where(r=> r.RouteId != routeDto?.RouteId).ToArray();
            var clusters = GatewayState?.Value?.Clusters?.Where(r=> r.ClusterId != routeDto?.ClusterId).ToArray();
            StateHasChanged();
        }
    }
}

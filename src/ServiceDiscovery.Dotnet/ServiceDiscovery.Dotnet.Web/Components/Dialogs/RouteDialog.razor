@implements IDialogContentComponent<RouteDto>

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>



@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentTextField @bind-Value="@NewRouteId">RouteId:</FluentTextField>
        <FluentTextField @bind-Value="@NewClusterId">ClusterId:</FluentTextField>
        <FluentTextField @bind-Value="@NewMatchPath">Path:</FluentTextField>
    </FluentStack>

</FluentDialogBody>
@* Footer *@
<FluentDialogFooter>
    @if (Content is null)
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Create</FluentButton>
    }
    else
    {
        <FluentButton Appearance="Appearance.Accent" OnClick="@UpdateAsync">Update</FluentButton>
    }

    <FluentButton Appearance="Appearance.Accent" OnClick="@CloseAsync">Close</FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public RouteDto? Content { get; set; }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    string NewRouteId = string.Empty;
    string NewClusterId = string.Empty;
    string NewMatchPath = string.Empty;


    protected override Task OnParametersSetAsync()
    {
        if(Content is not null)
        {
            NewRouteId = Content.RouteId;
            if(string.IsNullOrEmpty(Content.ClusterId))
            {
                Content.ClusterId = string.Empty;
            }
            if(Content.Match is null)
            {
                Content.Match = new MatchDto
                {
                    Path = string.Empty
                };
            }
        }
        return base.OnParametersSetAsync();
    }
    private async Task SaveAsync()
    {
        await Dialog.CloseAsync<RouteDto>(new RouteDto
            {
                RouteId = NewRouteId,
                ClusterId = NewClusterId,
                Match = new MatchDto{ Path = NewMatchPath }
            });
    }

    private async Task UpdateAsync()
    {
        if(Content is not null)
            await Dialog.CloseAsync<RouteDto>(Content);
    }

    private async Task CloseAsync()
    {
        if(Content is not null)
            await Dialog.CloseAsync<RouteDto>(Content);
    }
}